from tests.gherkinexecutor.Feature_Json import *
from typing import List
import sys

class Feature_Json_glue :
    DNCString = "?DNC?"


    def Given_one_object_is(self, values: List[SimpleClass]) -> None:
        print("---  " + "Given_one_object_is")
        for value in values:
            print(value)
             # Add calls to production code and asserts
            i = value.to_SimpleClassInternal()
        raise NotImplementedError("Must implement")

    def Then_Json_should_be(self, value: str) -> None:
        print("---  " + "Then_Json_should_be")
        print(value)
        raise NotImplementedError("Must implement")

    def Given_Json_is(self, value: str) -> None:
        print("---  " + "Given_Json_is")
        print(value)
        raise NotImplementedError("Must implement")

    def Then_the_converted_object_is(self, values: List[SimpleClass]) -> None:
        print("---  " + "Then_the_converted_object_is")
        for value in values:
            print(value)
             # Add calls to production code and asserts
            i = value.to_SimpleClassInternal()
        raise NotImplementedError("Must implement")

    def Given_a_table_is(self, values: List[SimpleClass]) -> None:
        print("---  " + "Given_a_table_is")
        for value in values:
            print(value)
             # Add calls to production code and asserts
            i = value.to_SimpleClassInternal()
        raise NotImplementedError("Must implement")

    def Then_Json_for_table_should_be(self, value: str) -> None:
        print("---  " + "Then_Json_for_table_should_be")
        print(value)
        raise NotImplementedError("Must implement")

    def Given_Json_for_table_is(self, value: str) -> None:
        print("---  " + "Given_Json_for_table_is")
        print(value)
        raise NotImplementedError("Must implement")

    def Then_the_converted_table_should_be(self, values: List[SimpleClass]) -> None:
        print("---  " + "Then_the_converted_table_should_be")
        for value in values:
            print(value)
             # Add calls to production code and asserts
            i = value.to_SimpleClassInternal()
        raise NotImplementedError("Must implement")

