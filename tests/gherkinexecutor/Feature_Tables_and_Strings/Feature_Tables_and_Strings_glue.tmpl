from tests.gherkinexecutor.Feature_Tables_and_Strings import *
from typing import List
import sys

class Feature_Tables_and_Strings_glue :
    DNCString = "?DNC?"


    def Star_A_multiline_string_to_a_string(self, value: str) -> None:
        print("---  " + "Star_A_multiline_string_to_a_string")
        print(value)
        raise NotImplementedError("Must implement")

    def Star_A_multiline_string_to_a_List_of_String(self, values: List[str]) -> None:
        print("---  " + "Star_A_multiline_string_to_a_List_of_String")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Given_multiline_string(self, value: str) -> None:
        print("---  " + "Given_multiline_string")
        print(value)
        raise NotImplementedError("Must implement")

    def Then_should_be_equal_to_this_list(self, values: List[str]) -> None:
        print("---  " + "Then_should_be_equal_to_this_list")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_table_to_List_of_List_of_String(self, values: List[List[str]]) -> None:
        print("---  " + "Star_A_table_to_List_of_List_of_String")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_Table_to_List_Of_List_Of_Object(self, values: List[List[str]]) -> None:
        its = self.convert_list(values)
        print(its)
        raise NotImplementedError("Must implement")

    def Star_A_table_to_List_of_Object(self, values: List[ExampleClass]) -> None:
        print("---  " + "Star_A_table_to_List_of_Object")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_table_to_List_of_Object_with_Defaults(self, values: List[ExampleClass]) -> None:
        print("---  " + "Star_A_table_to_List_of_Object_with_Defaults")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_table_to_List_of_Object_with_Blanks_in_Values(self, values: List[ExampleClassWithBlanks]) -> None:
        print("---  " + "Star_A_table_to_List_of_Object_with_Blanks_in_Values")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_table_to_List_of_Object_with_Blanks_in_Defaults(self, values: List[ExampleClassWithBlanks]) -> None:
        print("---  " + "Star_A_table_to_List_of_Object_with_Blanks_in_Defaults")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Star_A_table_to_String(self, value: str) -> None:
        print("---  " + "Star_A_table_to_String")
        print(value)
        raise NotImplementedError("Must implement")

    def Given_A_table_to_String(self, value: str) -> None:
        print("---  " + "Given_A_table_to_String")
        print(value)
        raise NotImplementedError("Must implement")

    def Then_string_should_be_same_as(self, value: str) -> None:
        print("---  " + "Then_string_should_be_same_as")
        print(value)
        raise NotImplementedError("Must implement")

    def Given_A_table_to_List_of_Object_with_Defaults(self, values: List[ExampleClass]) -> None:
        print("---  " + "Given_A_table_to_List_of_Object_with_Defaults")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Then_table_should_be_same_as(self, values: List[ExampleClass]) -> None:
        print("---  " + "Then_table_should_be_same_as")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Given_A_table_to_List_of_Object(self, values: List[ExampleClass]) -> None:
        print("---  " + "Given_A_table_to_List_of_Object")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")

    def Then_transposed_table_to_List_of_Object_should_be_the_same(self, values: List[ExampleClass]) -> None:
        print("---  " + "Then_transposed_table_to_List_of_Object_should_be_the_same")
        for value in values:
            print(value)
             # Add calls to production code and asserts
        raise NotImplementedError("Must implement")


    def convert_list(self, string_list: List[List[str]]) -> List[List[int]]:
        class_list = []  # Initialize empty list
        for inner_list in string_list:
            inner_class_list = [int(s) for s in inner_list]  
        class_list.append(inner_class_list)  
        return class_list
        
